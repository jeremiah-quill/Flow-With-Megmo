{"ast":null,"code":"var _jsxFileName = \"/Users/jeremiahquill/Desktop/code/react-express-test-app/client/src/components/BraintreeDropIn.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // import \"./index.css\";\n\nimport dropin from \"braintree-web-drop-in\"; // import { Button } from \"reactstrap\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BraintreeDropIn(props) {\n  _s();\n\n  const tokenizedKey = \"sandbox_9qj522s2_ymtkdnwk4zxckp3y\";\n  const {\n    show,\n    onPaymentCompleted\n  } = props;\n  const [braintreeInstance, setBraintreeInstance] = useState(undefined);\n\n  const pay = () => {\n    if (braintreeInstance) {\n      braintreeInstance.requestPaymentMethod((error, payload) => {\n        if (error) {\n          console.error(error);\n        } else {\n          const payment_method_nonce = payload.nonce; // post to backend server the payment method nonce that we create on the front-end\n          // TODO: add error checking on this fetch? or is it handled in the backend then sent to front-end\n\n          fetch(\"/checkout\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              payment_method_nonce\n            })\n          }).then(response => response.json()).then(data => {\n            console.log(data);\n          });\n          console.log(`Payment completed with nonce=${payment_method_nonce}`);\n          onPaymentCompleted();\n        }\n      });\n    }\n  }; // when show is true, initialize the payment options through braintree configuration:\n\n\n  useEffect(() => {\n    if (show) {\n      const initializeBraintree = () => // take dropin import from braintree\n      dropin.create({\n        // insert your tokenization key or client token here\n        authorization: tokenizedKey,\n        // order of buttons\n        paymentOptionPriority: [\"venmo\", \"card\", \"paypal\"],\n        // container to inject the braintree payment options\n        container: \"#braintree-drop-in-div\",\n        // in addition to credit card (default), also add venmo capability.  set allowDesktop to true to allow desktop QR code method\n        venmo: {\n          allowDesktop: true\n        }\n      }, function (error, instance) {\n        if (error) console.error(error);else setBraintreeInstance(instance); // TODO what is this doing?\n      }); // TODO: what is this doing?\n\n\n      if (braintreeInstance) {\n        braintreeInstance.teardown().then(() => {\n          initializeBraintree();\n        });\n      } else {\n        initializeBraintree();\n      }\n    }\n  }, [show]); // TODO: why is this set to [show]\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: `${show ? \"block\" : \"none\"}`\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"braintree-drop-in-div\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"braintreePayButton\",\n      type: \"primary\",\n      disabled: !braintreeInstance,\n      onClick: pay,\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 3\n  }, this);\n}\n\n_s(BraintreeDropIn, \"VUDUeH7pygx+xiFWFvtRU33/Jxs=\");\n\n_c = BraintreeDropIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"BraintreeDropIn\");","map":{"version":3,"sources":["/Users/jeremiahquill/Desktop/code/react-express-test-app/client/src/components/BraintreeDropIn.js"],"names":["React","useEffect","useState","dropin","BraintreeDropIn","props","tokenizedKey","show","onPaymentCompleted","braintreeInstance","setBraintreeInstance","undefined","pay","requestPaymentMethod","error","payload","console","payment_method_nonce","nonce","fetch","method","headers","body","JSON","stringify","then","response","json","data","log","initializeBraintree","create","authorization","paymentOptionPriority","container","venmo","allowDesktop","instance","teardown","display"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import \"./index.css\";\nimport dropin from \"braintree-web-drop-in\";\n// import { Button } from \"reactstrap\";\n\nexport default function BraintreeDropIn(props) {\n\tconst tokenizedKey = \"sandbox_9qj522s2_ymtkdnwk4zxckp3y\";\n\tconst { show, onPaymentCompleted } = props;\n\n\tconst [braintreeInstance, setBraintreeInstance] = useState(undefined);\n\n\tconst pay = () => {\n\t\tif (braintreeInstance) {\n\t\t\tbraintreeInstance.requestPaymentMethod((error, payload) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t} else {\n\t\t\t\t\tconst payment_method_nonce = payload.nonce;\n\t\t\t\t\t// post to backend server the payment method nonce that we create on the front-end\n\t\t\t\t\t// TODO: add error checking on this fetch? or is it handled in the backend then sent to front-end\n\t\t\t\t\tfetch(\"/checkout\", {\n\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({ payment_method_nonce }),\n\t\t\t\t\t})\n\t\t\t\t\t\t.then((response) => response.json())\n\t\t\t\t\t\t.then((data) => {\n\t\t\t\t\t\t\tconsole.log(data);\n\t\t\t\t\t\t});\n\n\t\t\t\t\tconsole.log(`Payment completed with nonce=${payment_method_nonce}`);\n\t\t\t\t\tonPaymentCompleted();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\t// when show is true, initialize the payment options through braintree configuration:\n\tuseEffect(() => {\n\t\tif (show) {\n\t\t\tconst initializeBraintree = () =>\n\t\t\t\t// take dropin import from braintree\n\t\t\t\tdropin.create(\n\t\t\t\t\t{\n\t\t\t\t\t\t// insert your tokenization key or client token here\n\t\t\t\t\t\tauthorization: tokenizedKey,\n\t\t\t\t\t\t// order of buttons\n\t\t\t\t\t\tpaymentOptionPriority: [\"venmo\", \"card\", \"paypal\"],\n\t\t\t\t\t\t// container to inject the braintree payment options\n\t\t\t\t\t\tcontainer: \"#braintree-drop-in-div\",\n\t\t\t\t\t\t// in addition to credit card (default), also add venmo capability.  set allowDesktop to true to allow desktop QR code method\n\t\t\t\t\t\tvenmo: {\n\t\t\t\t\t\t\tallowDesktop: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tfunction (error, instance) {\n\t\t\t\t\t\tif (error) console.error(error);\n\t\t\t\t\t\telse setBraintreeInstance(instance); // TODO what is this doing?\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t// TODO: what is this doing?\n\t\t\tif (braintreeInstance) {\n\t\t\t\tbraintreeInstance.teardown().then(() => {\n\t\t\t\t\tinitializeBraintree();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tinitializeBraintree();\n\t\t\t}\n\t\t}\n\t}, [show]); // TODO: why is this set to [show]\n\n\treturn (\n\t\t<div style={{ display: `${show ? \"block\" : \"none\"}` }}>\n\t\t\t<div id={\"braintree-drop-in-div\"} />\n\t\t\t<button\n\t\t\t\tclassName={\"braintreePayButton\"}\n\t\t\t\ttype=\"primary\"\n\t\t\t\tdisabled={!braintreeInstance}\n\t\t\t\tonClick={pay}\n\t\t\t>\n\t\t\t\tPay\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}