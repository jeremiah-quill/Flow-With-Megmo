{"ast":null,"code":"var _jsxFileName = \"/Users/jeremiahquill/Desktop/code/flow-with-megmo/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport BraintreeDropIn from \"./components/BraintreeDropIn.js\";\nimport Navbar from \"./components/Navbar.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentView, setCurrentView] = useState('nav');\n  const [date, setDate] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [showBraintreeDropIn, setShowBraintreeDropIn] = useState(true);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    createClass(date, time); // reset form\n\n    setDate(\"\");\n    setTime(\"\");\n  }; // Create a new yoga class\n\n\n  const createClass = (classDate, classTime) => {\n    const classDetails = {\n      topic: \"Flow with Megmo\",\n      type: 2,\n      start_time: `${classDate}T${classTime}:00`,\n      duration: 60\n    }; // Send post request to express server with data from form\n\n    fetch(\"/api\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(classDetails)\n    }).then(response => response.json()).then(data => {\n      // TODO: Get back meeting details to add to state/re-render UI\n      console.log(data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"Cc9FAEmsSIKBv87NmHhhjGMHgpE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jeremiahquill/Desktop/code/flow-with-megmo/client/src/App.js"],"names":["React","useEffect","useState","BraintreeDropIn","Navbar","App","currentView","setCurrentView","date","setDate","time","setTime","showBraintreeDropIn","setShowBraintreeDropIn","handleSubmit","e","preventDefault","createClass","classDate","classTime","classDetails","topic","type","start_time","duration","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,KAAD,CAA9C;AACD,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,mBAAD,EAAsBC,sBAAtB,IAAgDX,QAAQ,CAAC,IAAD,CAA9D;;AAEA,QAAMY,YAAY,GAAIC,CAAD,IAAO;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,WAAW,CAACT,IAAD,EAAOE,IAAP,CAAX,CAF2B,CAG3B;;AACAD,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,IAAAA,OAAO,CAAC,EAAD,CAAP;AACA,GAND,CANc,CAcd;;;AACA,QAAMM,WAAW,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AAC7C,UAAMC,YAAY,GAAG;AACpBC,MAAAA,KAAK,EAAE,iBADa;AAEpBC,MAAAA,IAAI,EAAE,CAFc;AAGpBC,MAAAA,UAAU,EAAG,GAAEL,SAAU,IAAGC,SAAU,KAHlB;AAIpBK,MAAAA,QAAQ,EAAE;AAJU,KAArB,CAD6C,CAQ7C;;AACAC,IAAAA,KAAK,CAAC,MAAD,EAAS;AACbC,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR,OAFI;AAKbC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,YAAf;AALO,KAAT,CAAL,CAOEW,IAPF,CAOQC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAPrB,EAQEF,IARF,CAQQG,IAAD,IAAU;AACf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,KAXF;AAYA,GArBD;;AAuBA,sBACC;AAAA,4BACC;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADD,eAuBC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAvBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AA2BA;;GAjEQ7B,G;;KAAAA,G;AAmET,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport BraintreeDropIn from \"./components/BraintreeDropIn.js\";\nimport Navbar from \"./components/Navbar.js\";\n\nfunction App() {\n  const [currentView, setCurrentView] = useState('nav')\n\tconst [date, setDate] = useState(\"\");\n\tconst [time, setTime] = useState(\"\");\n\tconst [showBraintreeDropIn, setShowBraintreeDropIn] = useState(true);\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tcreateClass(date, time);\n\t\t// reset form\n\t\tsetDate(\"\");\n\t\tsetTime(\"\");\n\t};\n\n\t// Create a new yoga class\n\tconst createClass = (classDate, classTime) => {\n\t\tconst classDetails = {\n\t\t\ttopic: \"Flow with Megmo\",\n\t\t\ttype: 2,\n\t\t\tstart_time: `${classDate}T${classTime}:00`,\n\t\t\tduration: 60,\n\t\t};\n\n\t\t// Send post request to express server with data from form\n\t\tfetch(\"/api\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(classDetails),\n\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\t// TODO: Get back meeting details to add to state/re-render UI\n\t\t\t\tconsole.log(data);\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"app-container\">\n\t\t\t\t{/* <form onSubmit={handleSubmit}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\tvalue={date}\n\t\t\t\t\t\tonChange={(e) => setDate(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"time\"\n\t\t\t\t\t\tvalue={time}\n\t\t\t\t\t\tonChange={(e) => setTime(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<input type=\"submit\" value=\"Create Class\" />\n\t\t\t\t</form> */}\n\n\t\t\t\t{/* <BraintreeDropIn\n\t\t\t\t\tshow={showBraintreeDropIn}\n\t\t\t\t\tonPaymentCompleted={() => {\n\t\t\t\t\t\tsetShowBraintreeDropIn(false);\n\t\t\t\t\t}}\n\t\t\t\t/> */}\n\t\t\t</div>\n\t\t\t<Navbar />\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}